#include "server.h"

int initiate_server(void){
    int sockval;
    struct sockaddr_in Direccion;

    syslog (LOG_INFO, "Creando socket...");
    if ( (sockval = socket(AF_INET, SOCK_STREAM, 0)) < 0 ){
        syslog(LOG_ERR, "Error creating socket");
        exit(EXIT_FAILURE);
    }

    Direccion.sin_family=AF_INET; /* TCP/IP family */
    Direccion.sin_port=htons(NFC_SERVER_PORT); /* Asigning port */
    Direccion.sin_addr.s_addr=htonl(INADDR_ANY); /* Accept all adresses */
    bzero((void *)&(Direccion.sin_zero), 8);
    /*Hay que hacer un bucle para conectar con todos los clientes que quieran no solo uno*/
    syslog (LOG_INFO, "Socket conectado en puerto %d", NFC_SERVER_PORT);
    if (bind (sockval, (struct sockaddr *)&Direccion, sizeof(Direccion)) < 0){
        syslog(LOG_ERR, "ERROR conectando socket");
        exit(EXIT_FAILURE);
    }
    /*Hay que hacer un bucle para cada binding para escuchar todo el rato al mismo cliente*/
    syslog (LOG_INFO, "Escuchando conexiones...");
        if (listen (sockval, MAX_CONNECTIONS) < 0){
            syslog(LOG_ERR, "ERROR escuchando conexiones");
            exit(EXIT_FAILURE);
        }
    return sockval;
}

void accept_connection(int sockval){
	int client_socket;
	socklen_t len;
	struct sockaddr Conexion;

	len = sizeof(Conexion);

	while(1){
		client_socket = accept(sockval, &Conexion, &len);
		if (client_socket < 0){
		syslog(LOG_ERR, "ERROR aceptando conexiones");
		exit(EXIT_FAILURE);
		}
		syslog(LOG_ERR, "-- Conexion recibida en el socket");
		/*Se lanza el servicio y se espera a que acabe, de momento se comenta*/
		launch_service(client_socket);
	}
        close(sockval);
	return;
}

void launch_service(int connval){
    int pid;
    char str[100];
    pid = fork();
    if (pid < 0) exit(EXIT_FAILURE);
    if (pid == 0) return;
    while(1)
    {
        /*bzero( str, 100); 
        read(connval,str,100);
        if( str[0] == '\0' ){
            syslog (LOG_INFO, "Cierra conexion");
            break;
        }
        syslog (LOG_INFO, "Mensaje recibido: %s", str);
        write(connval, "Respuesta servidor: ", strlen("Respuesta servidor: ")+1);
        write(connval, str, strlen(str)+1);*/
        bzero(str,100);
        recv(connval, str, 100, 0);
        if( str[0] == '\0' ){
            syslog (LOG_INFO, "Cierra conexion");
            break;
        }
        syslog(LOG_INFO, "Mensaje recibido");
        send(connval, str, strlen(str), 0);
        syslog(LOG_INFO, "Mensaje enviado");
    }
    /*close(connval);*/
    syslog (LOG_INFO, "Servicio Cliente: Fin servicio");
    exit(EXIT_SUCCESS);
}

int main(){
    accept_connection(initiate_server());
    return 0;

}
