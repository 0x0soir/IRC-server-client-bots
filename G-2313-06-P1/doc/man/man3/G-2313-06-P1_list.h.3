.TH "includes/G-2313-06-P1_list.h" 3 "Domingo, 7 de Mayo de 2017" "Version 1.0" "Redes de Comunicaciones II" \" -*- nroff -*-
.ad l
.nh
.SH NAME
includes/G-2313-06-P1_list.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Clases"

.in +1c
.ti -1c
.RI "struct \fBlist_head\fP"
.br
.in -1c
.SS "'defines'"

.in +1c
.ti -1c
.RI "#define \fBLIST_HEAD_INIT\fP(name)   { &(name), &(name) }"
.br
.ti -1c
.RI "#define \fBLIST_HEAD\fP(name)   struct \fBlist_head\fP name = \fBLIST_HEAD_INIT\fP(name)"
.br
.ti -1c
.RI "#define \fBINIT_LIST_HEAD\fP(ptr)"
.br
.ti -1c
.RI "#define \fBlist_entry\fP(ptr,  type,  member)   ((type *)((char *)(ptr)\-(unsigned long)(&((type *)0)\->member)))"
.br
.ti -1c
.RI "#define \fBlist_for_each\fP(pos,  head)"
.br
.ti -1c
.RI "#define \fBlist_for_each_prev\fP(pos,  head)"
.br
.ti -1c
.RI "#define \fBlist_for_each_safe\fP(pos,  n,  head)"
.br
.ti -1c
.RI "#define \fBlist_for_each_entry\fP(elem_ptr,  head,  member)"
.br
.ti -1c
.RI "#define \fBlist_for_each_entry_safe\fP(pos,  n,  head,  member)"
.br
.ti -1c
.RI "#define \fBlist_next_entry\fP(elem_ptr,  member)   \fBlist_entry\fP((elem_ptr)\->member\&.next, typeof(*(elem_ptr)), member)"
.br
.ti -1c
.RI "#define \fBlist_first_entry\fP(list_ptr,  type,  member)   \fBlist_entry\fP(list_ptr\->next, type, member)"
.br
.in -1c
.SH "Documentación de los 'defines'"
.PP 
.SS "#define INIT_LIST_HEAD(ptr)"
\fBValor:\fP
.PP
.nf
do { \
    (ptr)->next = (ptr); (ptr)->prev = (ptr); \
} while (0)
.fi
.PP
Definición en la línea 29 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_entry(ptr, type, member)   ((type *)((char *)(ptr)\-(unsigned long)(&((type *)0)\->member)))"
list_entry - get the struct for this entry : the &struct \fBlist_head\fP pointer\&. : the type of the struct this is embedded in\&. : the name of the list_struct within the struct\&. 
.PP
Definición en la línea 187 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_first_entry(list_ptr, type, member)   \fBlist_entry\fP(list_ptr\->next, type, member)"

.PP
Definición en la línea 244 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_for_each(pos, head)"
\fBValor:\fP
.PP
.nf
for (pos = (head)->next; pos != (head); \
            pos = pos->next)
.fi
list_for_each - iterate over a list : the &struct \fBlist_head\fP to use as a loop counter\&. : the head for your list\&. 
.PP
Definición en la línea 195 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_for_each_entry(elem_ptr, head, member)"
\fBValor:\fP
.PP
.nf
for(elem_ptr = list_first_entry(head, typeof(*elem_ptr), member); \
       &(elem_ptr->member) != (head); \
       elem_ptr = list_next_entry(elem_ptr, member))
.fi
list_for_each_entry - iterate over list of given type : the type * to use as a loop counter\&. : the head for your list\&. : the name of the list_struct within the struct\&. 
.PP
Definición en la línea 223 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_for_each_entry_safe(pos, n, head, member)"
\fBValor:\fP
.PP
.nf
for (pos = list_entry((head)->next, typeof(*pos), member),  \
        n = list_entry(pos->member\&.next, typeof(*pos), member);  \
         &pos->member != (head);                    \
         pos = n, n = list_entry(n->member\&.next, typeof(*n), member))
.fi
list_for_each_entry_safe - iterate over list of given type safe against removal of list entry : the type * to use as a loop counter\&. 
.br
: another type * to use as temporary storage : the head for your list\&. : the name of the list_struct within the struct\&. 
.PP
Definición en la línea 235 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_for_each_prev(pos, head)"
\fBValor:\fP
.PP
.nf
for (pos = (head)->prev; pos != (head); \
            pos = pos->prev)
.fi
list_for_each_prev - iterate over a list backwards : the &struct \fBlist_head\fP to use as a loop counter\&. : the head for your list\&. 
.PP
Definición en la línea 203 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_for_each_safe(pos, n, head)"
\fBValor:\fP
.PP
.nf
for (pos = (head)->next, n = pos->next; pos != (head); \
        pos = n, n = pos->next)
.fi
list_for_each_safe - iterate over a list safe against removal of list entry : the &struct \fBlist_head\fP to use as a loop counter\&. 
.br
: another &struct \fBlist_head\fP to use as temporary storage : the head for your list\&. 
.PP
Definición en la línea 213 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define LIST_HEAD(name)   struct \fBlist_head\fP name = \fBLIST_HEAD_INIT\fP(name)"

.PP
Definición en la línea 26 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define LIST_HEAD_INIT(name)   { &(name), &(name) }"

.PP
Definición en la línea 24 del archivo G\-2313\-06\-P1_list\&.h\&.
.SS "#define list_next_entry(elem_ptr, member)   \fBlist_entry\fP((elem_ptr)\->member\&.next, typeof(*(elem_ptr)), member)"

.PP
Definición en la línea 241 del archivo G\-2313\-06\-P1_list\&.h\&.
.SH "Autor"
.PP 
Generado automáticamente por Doxygen para Redes de Comunicaciones II del código fuente\&.
