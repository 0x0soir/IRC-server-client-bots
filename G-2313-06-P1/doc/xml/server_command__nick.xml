<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="server_command_nick" kind="page">
    <compoundname>server_command_nick</compoundname>
    <title>server_command_nick</title>
    <detaileddescription>
<para>Función handler del comando NICK del IRC.</para><sect1 id="server_command_nick_1synopsis_nick">
<title>Synopsis</title>
<para><computeroutput> <bold>#include</bold> <bold>&lt;<ref refid="G-2313-06-P1__function__handlers_8h" kindref="compound">G-2313-06-P1_function_handlers.h</ref>&gt;</bold> <linebreak/>
 <bold>void <ref refid="G-2313-06-P1__function__handlers_8c_1a71db0004ee6b40a6c19c18c4e11e8d92" kindref="member">server_command_nick(char* command, int desc, char * nick_static, int* register_status)</ref></bold> </computeroutput> </para></sect1>
<sect1 id="server_command_nick_1descripcion_nick">
<title>Descripción</title>
<para>Esta función ejecuta el handler del comando en cuestión, para ello realiza una serie de comprobaciones previas:</para><para><itemizedlist>
<listitem>
<para><bold>IRCMsg_ErrNoNickNameGiven:</bold> Comprueba que el nick no sea nulo. </para></listitem>
<listitem>
<para><bold>IRCMsg_ErrErroneusNickName:</bold> Comprueba que el nick no sea erróneo (máx. 9 carácteres). </para></listitem>
<listitem>
<para><bold>IRCMsg_ErrNickNameInUse:</bold> Comprueba que el nick no esté siendo utilizado por otro usuario. </para></listitem>
</itemizedlist>
</para><para>Una vez realizadas las comprobaciones, dicha función se ejecuta de dos formas posibles:</para><para><itemizedlist>
<listitem>
<para><bold>Actualiza nick existente:</bold> Es decir, en caso de que se esté actualizando el nick de un usuario existente, se actualiza el valor utilizando la función <bold>server_channels_update_nick</bold>. <linebreak/>
Condición necesaria: El valor de register_status tiene que ser 2 (es decir, usuario <bold>registrado</bold> correctamente de forma previa).  </para></listitem>
<listitem>
<para><bold>Guarda nick para registro:</bold> Es decir, en caso de que no se haya producido un registro previo, se guarda el valor del nick para usarlo posteriormente en el comando USER. <linebreak/>
Condición necesaria: El valor de register_status tiene que ser distinto de 2 (es decir, usuario <bold>no registrado</bold> correctamente de forma previa).  </para></listitem>
</itemizedlist>
</para><para>En ambos casos se devuelve un mensaje generado por <bold>IRCMsg_Nick</bold> y libera los recursos utilizados en la función (punteros). </para></sect1>
<sect1 id="server_command_nick_1return_nick">
<title>Valores devueltos</title>
<para><itemizedlist>
<listitem>
<para><bold>void</bold> No devuelve nada. </para></listitem>
</itemizedlist>
</para></sect1>
<sect1 id="server_command_nick_1authors_nick">
<title>Autores</title>
<para><itemizedlist>
<listitem>
<para>Jorge Parrilla Llamas (<ulink url="mailto:jorge.parrilla@estudiante.uam.es">jorge.parrilla@estudiante.uam.es</ulink>) </para></listitem>
<listitem>
<para>Javier de Marco Tomás (<ulink url="mailto:javier.marco@estudiante.uam.es">javier.marco@estudiante.uam.es</ulink>) </para></listitem>
</itemizedlist>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
